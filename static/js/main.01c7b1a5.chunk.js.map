{"version":3,"sources":["Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","date","Date","timerId","setInterval","setState","this","prevProps","oldName","name","newName","props","console","log","clearInterval","toLocaleTimeString","className","React","Component","App","hasClock","randomNme","randomName","Math","random","toString","slice","document","addEventListener","ReactDOM","render","getElementById"],"mappings":"2OAWMA,E,4MACJC,MAAQ,CACNC,KAAM,IAAIC,M,EAGZC,QAAUC,aAAY,WACpB,EAAKC,SAAS,CAAEJ,KAAM,IAAIC,SACzB,K,uDAEH,WACE,OAAOI,KAAKH,U,gCAGd,SAAmBI,GACjB,IAAcC,EAAYD,EAAlBE,KACMC,EAAYJ,KAAKK,MAAvBF,KAEJF,EAAUE,OAASH,KAAKK,MAAMF,MAEhCG,QAAQC,IAAR,uBAA4BL,EAA5B,eAA0CE,M,kCAI9C,WACEI,cAAcR,KAAKH,W,oBAGrB,WACE,IAAQF,EAASK,KAAKN,MAAdC,KACAQ,EAASH,KAAKK,MAAdF,KAKR,OAFAG,QAAQC,IAAIP,KAAKN,MAAMC,KAAKc,sBAG1B,sBAAKC,UAAU,QAAf,UACE,oBAAGA,UAAU,cAAc,UAAQ,OAAnC,0BAEG,IACAf,EAAKc,qBACL,OAEH,oBAAGC,UAAU,cAAc,UAAQ,OAAnC,kBAEG,IACAP,Y,GA7CSQ,IAAMC,WAoDXnB,ICtDToB,G,kNACJnB,MAAyB,CACvBoB,UAAU,EACVX,KAAM,S,EAGRY,UAAYjB,aAAY,WACtB,IAAMkB,EAAaC,KAAKC,SAASC,WAAWC,MAAM,EAAG,GAErD,EAAKrB,SAAS,CAAEI,KAAK,WAAD,OAAaa,OAChC,M,uDAEH,WAAqB,IAAD,OAClBK,SAASC,iBAAiB,eAAe,WACvC,EAAKvB,SAAS,CAAEe,UAAU,OAG5BO,SAASC,iBAAiB,SAAS,WACjC,EAAKvB,SAAS,CAAEe,UAAU,S,kCAI9B,WACEN,cAAcR,KAAKe,a,oBAGrB,WACE,MAA2Bf,KAAKN,MAAxBoB,EAAR,EAAQA,SAAUX,EAAlB,EAAkBA,KAElB,OACE,sBAAKO,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,yBAECI,GAAY,cAAC,EAAD,CAAOX,KAAMA,W,GAjChBQ,IAAMC,YAuCTC,IC7CfU,IAASC,OACP,cAAC,EAAD,IACAH,SAASI,eAAe,W","file":"static/js/main.01c7b1a5.chunk.js","sourcesContent":["import React from 'react';\nimport './Clock.scss';\n\ntype Props = {\n  name: string,\n};\n\ntype State = {\n  date: Date,\n};\n\nclass Clock extends React.Component<Props, State> {\n  state = {\n    date: new Date(),\n  };\n\n  timerId = setInterval(() => {\n    this.setState({ date: new Date() });\n  }, 1000);\n\n  componentDidMount() {\n    return this.timerId;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { name: oldName } = prevProps;\n    const { name: newName } = this.props;\n\n    if (prevProps.name !== this.props.name) {\n      // eslint-disable-next-line no-console\n      console.log(`Renamed from ${oldName} to ${newName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    const { date } = this.state;\n    const { name } = this.props;\n\n    // eslint-disable-next-line no-console\n    console.log(this.state.date.toLocaleTimeString());\n\n    return (\n      <div className=\"clock\">\n        <p className=\"clock__time\" data-cy=\"time\">\n          Current time:\n          {' '}\n          {date.toLocaleTimeString()}\n          {' '}\n        </p>\n        <p className=\"clock__name\" data-cy=\"time\">\n          Name:\n          {' '}\n          {name}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React from 'react';\nimport Clock from './Clock';\nimport './App.scss';\n\ntype State = {\n  hasClock: boolean,\n  name: string,\n};\n\nclass App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    hasClock: true,\n    name: 'Clock',\n  };\n\n  randomNme = setInterval(() => {\n    const randomName = Math.random().toString().slice(2, 6);\n\n    this.setState({ name: `Clock - ${randomName}` });\n  }, 3300);\n\n  componentDidMount() {\n    document.addEventListener('contextmenu', () => {\n      this.setState({ hasClock: false });\n    });\n\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.randomNme);\n  }\n\n  render() {\n    const { hasClock, name } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\">React clock</h1>\n\n        {hasClock && <Clock name={name} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}